from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from loguru import logger

from keyboard.inline.menu.inline_menu import InlineMenu
from keyboard.inline.rating.inline_feedback import InlineFeedback
from handlers.callback.callback_data import (
    RatingMenuCallback, RatingFeedbackCallback, RatingLinkFeedbackCallback
)
from .question import question
from database import crud

router = Router()


class TeacherFeedback(StatesGroup):
    name = State()
    id = State()


@logger.catch()
@router.callback_query(RatingMenuCallback.filter(F.act == "LEAVE-FEEDBACK"))
async def see_rating(query: CallbackQuery, state: FSMContext):
    # –ø–æ–ª—É—á–∞–µ–º callback –∏–∑ inline_menu_rating
    await query.message.edit_text(
        "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.</b>"
        "<i>\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤—ã–∑–æ–≤–∏ –º–µ–Ω—é, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É.</i>"
    )
    await state.set_state(TeacherFeedback.name)


@logger.catch()
@router.message(TeacherFeedback.name)
async def process_selecting_teacher(msg: Message, state: FSMContext):
    # –ø–æ–ª—É—á–∞–µ–º id –ø—Ä–µ–ø–æ–¥–æ–≤–∞—Ç–µ–ª—è, –¥–æ—Å—Ç–∞–µ–º —Ñ–∏–æ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    teacher_id = await crud.rating.verify_teacher(msg.text.title())
    # –µ—Å–ª–∏ teacher_id = None, —Ç–æ —Ñ–∏–æ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ
    if teacher_id:
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–≤–ª—è–ª –ª–∏ —é–∑–µ—Ä —É–∂–µ –æ—Ç–∑—ã–≤ –æ —ç—Ç–æ –ø—Ä–µ–ø–æ–¥–æ–≤–∞—Ç–µ–ª–µ
        if not await crud.rating.verify_feedback(
                user_id=msg.from_user.id,
                teacher_id=teacher_id
        ):
            name = msg.text.title()
            await state.update_data(name=name, id=teacher_id)
            # –≤—ã–∑—ã–≤–∞–µ–º inline –∫–Ω–æ–ø–∫–∏ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
            await msg.answer(
                f"{question[0]}",
                reply_markup=await InlineFeedback().start_feedback()
            )
        else:
            await msg.answer("–≤—ã —É–∂–µ –æ—Å—Ç–∞–≤–ª—è–ª–∏ –æ—Ç–∑—ã–≤")
    else:
        await msg.answer("–∏–º—è —Ñ–∏–æ –ø—Ä–µ–ø–æ–¥–æ–≤–∞—Ç–µ–ª—è –Ω–µ –≤–µ—Ä–Ω–æ–µ")


@logger.catch()
@router.callback_query(RatingLinkFeedbackCallback.filter(F.act == "LINK"))
async def link_to_feedback(
        query: CallbackQuery,
        callback_data: RatingLinkFeedbackCallback,
        state: FSMContext,
):
    # –º—ã –ª–æ–≤–∏–º callbakc –∏–∑ teacher_rating
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–≤–ª—è–ª –ª–∏ —é–∑–µ—Ä –æ—Ç–∑—ã–≤ –æ–± –ø—Ä–µ–ø–æ–¥–æ–≤–∞—Ç–µ–ª–µ
    if not await crud.rating.verify_feedback(
            user_id=query.from_user.id,
            teacher_id=callback_data.teacher_id
    ):
        teacher_name = await crud.rating.get_teacher_name(callback_data.teacher_id)
        await state.update_data(
            name=teacher_name,
            id=callback_data.teacher_id
        )
        # –≤—ã–∑—ã–≤–∞–µ–º inline –∫–Ω–æ–ø–∫–∏ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
        await query.message.edit_text(
            f"{question[0]}",
            reply_markup=await InlineFeedback().start_feedback()
        )
    else:
        await query.message.edit_text(
            "–≤—ã —É–∂–µ –æ—Å—Ç–∞–≤–ª—è–ª–∏ –æ—Ç–∑—ã–≤"
        )


@logger.catch()
@router.callback_query(RatingFeedbackCallback.filter())
async def process_feedback(
        query: CallbackQuery,
        callback_data: RatingFeedbackCallback,
        state: FSMContext,
        marks: list = []
):
    await query.message.edit_text("–º—É—Ä –º—É—Ä...")
    # –¥–æ—Å—Ç–∞–µ–º –æ—Ç–≤–µ—Ç –∏–∑ callback
    mark_data = await InlineFeedback().process_selection(
        query=query,
        callback_data=callback_data
    )
    # –ø–æ–ª—É—á–∞–µ–º id –ø—Ä–µ–ø–æ–¥–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    teacher_data = await state.get_data()
    # –¥–µ–ª–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –Ω–æ–º–µ—Ä –æ—Ç–≤–µ—Ç–∞
    if mark_data["question"] != 5:
        # –¥–æ–±–æ–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ —Å–∏–ø–æ—Å–æ–∫
        marks.append(mark_data)
        # –≤—ã–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        await query.message.edit_text(
            f"{question[mark_data['question']]}",
            reply_markup=await InlineFeedback().start_feedback(
                question=mark_data["question"] + 1
            )
        )
    else:
        # –¥–æ–±–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç
        marks.append(mark_data)
        # –¥–æ–±–æ–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã –≤ –¥–±
        await crud.rating.add_rating(
            teacher_id=teacher_data["id"],
            user_id=query.from_user.id,
            marks=marks
        )
        marks.clear()
        # –≤—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        await query.message.edit_text(
            "üòº —Å–ø–∞—Å–∏–±–æ, –æ—Ç–≤–µ—Ç—ã –∑–∞–ø–∏—Å–∞–Ω—ã üòº"
            "\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: </b> ",
            reply_markup=await InlineMenu().menu()
        )
