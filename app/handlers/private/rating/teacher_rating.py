from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from loguru import logger

# * import inline keyboard to return to ratings menu
from keyboard.inline.rating.inline_link_back_rating import leavefeedback_or_back
# * import callback
from handlers.callback.callback_data import RatingMenuCallback
# * import requests to database
from database import crud

router = Router()


class Teacher(StatesGroup):
    name = State()


@logger.catch()
@router.callback_query(RatingMenuCallback.filter(F.act == "SEE-RATING"))
async def see_rating(query: CallbackQuery, state: FSMContext):
    """Working out a callback for see teacher's rating

    :param query: this object represents an incoming callback query from a callback button
    :param state: inherit fsm
    """
    logger.debug("student looking teacher's rating")
    await query.message.edit_text(
        "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.</b>"
        "<i>\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤—ã–∑–æ–≤–∏ –º–µ–Ω—é, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É.</i>")
    await state.set_state(Teacher.name)


@logger.catch()
@router.message(Teacher.name)
async def process_selecting_teacher(msg: Message, state: FSMContext):
    """Handling the state when the user entered teacher's name

    :param msg: message sent by the user
    :param state: inherit fsm
    """
    # * check if a teacher exist
    teacher_id = await crud.rating.verify_teacher(msg.text.title())
    # * if Teacher_id = No, this is incorrect
    if teacher_id:
        await state.clear()
        teacher_name = msg.text.title()
        # * get the teacher's qualification using id
        teacher_subject = await crud.rating.get_teacher_subject(teacher_id)
        # * calculation the teacher's rating
        rating = await crud.rating.get_rating(teacher_id)
        # * calculation the teacher's average rating
        rating_avg = await crud.rating.get_avg_rating(teacher_id)
        if rating:
            await msg.answer(
                f"<b>{teacher_name}</b>" 
                f"<i>\n–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {teacher_subject}</i>"
                f"\n\n<b>–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞:</b> {rating_avg}"
                f"\n\n–ó–Ω–∞–Ω–∏—è: {rating[0][1]}"
                f"\n–£–º–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç—å: {rating[1][1]}"
                f"\n–í –æ–±—â–µ–Ω–∏–∏: {rating[2][1]}"
                f"\n¬´–•–∞–ª—è–≤–Ω–æ—Å—Ç—å¬ª: {rating[3][1]}"
                f"<i>\n\n–ú—ã –±—ã–ª–∏ –±—ã –æ—á–µ–Ω—å –ø—Ä–∏–∑–Ω–∞—Ç–µ–ª—å–Ω—ã, –µ—Å–ª–∏ –≤—ã –º–æ–≥–ª–∏ –±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–∞—à–∏–º –æ–ø—ã—Ç–æ–º –æ–±—É—á–µ–Ω–∏—è —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º.</i>",
                reply_markup=leavefeedback_or_back(teacher_id=teacher_id)
            )
        else:
            await msg.answer(
                f"<b>{teacher_name}</b>"
                f"<i>\n–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {teacher_subject}</i>"
                f"\n\n<code>–†–µ–π—Ç–∏–Ω–≥ –æ—Å—É—Ç—Å—Ç–≤—É–µ—Ç</code>"
                "<i>\n\n–ú—ã –±—ã–ª–∏ –±—ã –æ—á–µ–Ω—å –ø—Ä–∏–∑–Ω–∞—Ç–µ–ª—å–Ω—ã, –µ—Å–ª–∏ –≤—ã –º–æ–≥–ª–∏ –±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–∞—à–∏–º –æ–ø—ã—Ç–æ–º –æ–±—É—á–µ–Ω–∏—è —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º.</i>",
                reply_markup=leavefeedback_or_back(teacher_id=teacher_id)
            )
    else:
        await msg.answer(
            "–§—ã—Ä–∫, —Ç–∞–∫–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! üôÄ"
            "\n\n<i>–í–æ–∑–º–æ–∂–Ω–æ, —Ç—ã –ø—Ä–æ—Å—Ç–æ –æ—à–∏–±—Å—è –≤ –∏–º–µ–Ω–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è. –ù–∞–ø–∏—à–∏ –∑–∞–Ω–æ–≤–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞</i>"
        )
