from aiogram import Router, F
from aiogram.types import Message
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from loguru import logger

# * import callback
from handlers.callback.callback_data import MenuCallback, SitingCallback
# * import inline rating menu keyboard
from keyboard.inline.menu.inline_menu import main_menu
# * import inline siting menu keyboard
from keyboard.inline.siting.inline_siting import siting_menu
# * import requests to database
from database import crud

router = Router()


class UserChangeInfo(StatesGroup):
    user_group = State()


@logger.catch()
@router.callback_query(MenuCallback.filter(F.act == "SITING"))
async def siting(query: CallbackQuery):
    """Working out a callback for a call siting menu

    :param query: this object represents an incoming callback query from a callback button
    """
    logger.info("Siting menu is called")
    await query.message.edit_text(
        "ü™¶ <b>–Ω–∞—Å—Ç—Ä–æ–∫–∏</b> ü™¶\n\n"
        "<i>–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –∫–∞–∫–∏–µ-–ª–∏–±–æ –ø—Ä–æ–±–ª–µ–º—ã, –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –ø–∏—Å–∞—Ç—å —Å—é–¥–∞:</i> @manager_miu",
        reply_markup=siting_menu()
    )


@logger.catch()
@router.callback_query(SitingCallback.filter(F.act == "CHANGE-GROUP"))
async def changing_group(query: CallbackQuery, state: FSMContext):
    """Working out a callback for update student's group

    :param query: this object represents an incoming callback query from a callback button
    :param state: inherit fsm
    """
    await state.set_state(UserChangeInfo.user_group)
    await query.message.edit_text("–ù–∞–ø–∏—â–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: –õ–ü–ü141-1)")


@logger.catch()
@router.message(UserChangeInfo.user_group)
async def process_user_group(msg: Message, state: FSMContext):
    """Handling the state when the student entered group name

    :param msg: message sent by the user
    :param state: inherit fsm
    """
    # * check if the group exists
    group_id = await crud.group.verify_group(msg.text.upper())
    if group_id:
        await state.clear()
        await crud.group.update_group(user_id=msg.from_user.id, group_id=group_id)
        await msg.answer(
            "üòº –≥—Ä—É–ø–ø—É –ø–æ–º–µ–Ω—è–ª–∏ üòº"
            "\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: </b> ",
            reply_markup=main_menu()
        )
    else:
        await msg.answer(
            "–§—ã—Ä–∫, —Ç–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æüôÄ"
            "\n\n<i>–í–æ–∑–º–æ–∂–Ω–æ, —Ç—ã –ø—Ä–æ—Å—Ç–æ –æ—à–∏–±—Å—è –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã. –ù–∞–ø–∏—à–∏ –∑–∞–Ω–æ–≤–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.</i>"
        )


@logger.catch()
@router.callback_query(SitingCallback.filter(F.act == "BACK"))
async def back_manu(query: CallbackQuery):
    """Working out a callback for back to main menu

    :param query: this object represents an incoming callback query from a callback button
    """
    await query.message.edit_text(
        "–ú—è—É-–º—è—É-–º—è—Éüòª"
        "\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: </b>",
        reply_markup=main_menu()
    )