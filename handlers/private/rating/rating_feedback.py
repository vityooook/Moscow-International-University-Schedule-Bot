from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from keyboard.inline.menu.inline_menu import InlineMenu
from keyboard.inline.rating.inline_menu_rating import InlineMenuRating
from keyboard.inline.rating.inline_cancel_rating import InlineCancelRating
from keyboard.inline.rating.inline_feedback import InlineFeedback
from handlers.callback.callback_data import RatingMenuCallback, RatingCancelCallback, \
    RatingFeedbackCallback, RatingLinkFeedbackCallback
from database.crud.rating import add_rating
from .question import question
from database import crud

router = Router()


class TeacherFeedback(StatesGroup):
    name = State()
    id = State()


@router.callback_query(RatingMenuCallback.filter(F.act == "LEAVE-FEEDBACK"))
async def see_rating(query: CallbackQuery, state: FSMContext):
    await query.message.edit_text(
        "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.</b>"
        "<i>\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤—ã–∑–æ–≤–∏ –º–µ–Ω—é, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É.</i>"
    )
    await state.set_state(TeacherFeedback.name)


@router.message(TeacherFeedback.name)
async def process_selecting_teacher(msg: Message, state: FSMContext):
    teacher_id = crud.rating.verify_teacher(msg.text.title())
    if teacher_id:
        if not crud.rating.verify_feedback(
                user_id=msg.from_user.id,
                teacher_id=teacher_id
        ):
            name = msg.text.title()
            await state.update_data(name=name, id=teacher_id)
            await msg.answer(
                f"{question[0]}",
                reply_markup=await InlineFeedback().start_feedback()
            )
        else:
            await msg.answer("–≤—ã —É–∂–µ –æ—Å—Ç–∞–≤–ª—è–ª–∏ –æ—Ç–∑—ã–≤")
    else:
        await msg.answer("–∏–º—è —Ñ–∏–æ –ø—Ä–µ–ø–æ–¥–æ–≤–∞—Ç–µ–ª—è –Ω–µ –≤–µ—Ä–Ω–æ–µ")


@router.callback_query(RatingLinkFeedbackCallback.filter(F.act == "LINK"))
async def link_to_feedback(
        query: CallbackQuery,
        callback_data: RatingLinkFeedbackCallback,
        state: FSMContext,
):
    if not crud.rating.verify_feedback(
            user_id=query.from_user.id,
            teacher_id=callback_data.teacher_id
    ):
        teacher_name = crud.rating.get_teacher_name(callback_data.teacher_id)
        await state.update_data(
            name=teacher_name,
            id=callback_data.teacher_id
        )
        await query.message.edit_text(
            f"{question[0]}",
            reply_markup=await InlineFeedback().start_feedback()
        )
    else:
        await query.message.edit_text(
            "–≤—ã —É–∂–µ –æ—Å—Ç–∞–≤–ª—è–ª–∏ –æ—Ç–∑—ã–≤"
        )


@router.callback_query(RatingFeedbackCallback.filter())
async def process_feedback(
        query: CallbackQuery,
        callback_data: RatingFeedbackCallback,
        state: FSMContext,
        marks: list = []
):
    await query.message.edit_text("–º—É—Ä –º—É—Ä...")
    mark_data = await InlineFeedback().process_selection(
        query=query,
        callback_data=callback_data
    )
    teacher_data = await state.get_data()
    if mark_data["select"] and mark_data["question"] != 5:
        del mark_data["select"]
        marks.append(mark_data)
        await query.message.edit_text(
            f"{question[mark_data['question']]}",
            reply_markup=await InlineFeedback().start_feedback(
                question=mark_data["question"] + 1
            )
        )
    else:
        del mark_data["select"]
        marks.append(mark_data)
        add_rating(
            teacher_id=teacher_data["id"],
            user_id=query.from_user.id,
            marks=marks
        )
        marks.clear()
        await query.message.edit_text(
            "üòº —Å–ø–∞—Å–∏–±–æ, –æ—Ç–≤–µ—Ç—ã –∑–∞–ø–∏—Å–∞–Ω—ã üòº"
            "\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: </b> ",
            reply_markup=await InlineMenu().menu()
        )
